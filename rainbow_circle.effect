uniform float4x4 ViewProj;
uniform texture2d image;

uniform float elapsed_time;
uniform float2 uv_offset;
uniform float2 uv_scale;
uniform float2 uv_pixel_interval;
uniform float rand_f;
uniform float2 uv_size;


#define vec2 float2
#define vec3 float3
#define vec4 float4
#define ivec2 int2
#define ivec3 int3
#define ivec4 int4
#define mat2 float2x2
#define mat3 float3x3
#define mat4 float4x4
#define fract frac
#define mix lerp
#define iResolution uv_size
#define iTime elapsed_time

uniform float nb_circle;
uniform float circle_width;


#define PI 3.141592

vec3 palette( float t, vec3 a, vec3 b, vec3 c, vec3 d )
{
    return a + b*cos( 6.28318*(c*t+d) );
}

vec3 p(float t){
return palette( t, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.0,0.33,0.67) );
}
// ---------- Shader Code
sampler_state def_sampler {
	AddressU  = Wrap;
	AddressV  = Wrap;
	Filter    = Linear;
};

struct VertFragData {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

VertFragData VSDefault(VertFragData v_in) {
	v_in.pos = mul(float4(v_in.pos.xyz, 1.0), ViewProj);
	return v_in;
}

mat2 r(float a){
    float c=cos(a);
    float s=sin(a);
    return mat2(c,s,-s,c);
}

#define ttime(tspeed) floor(iTime*tspeed) + pow(fract(iTime*tspeed),.1250)
vec3 fig(vec2 uv){
    vec3 d  =vec3(0.,0.,0.);
        float n = 10. + (smoothstep(-1000.,1000.,nb_circle)-.5)*10.;
        for(float i=0.;i<=n;i++){
            float b = int(i)%3 ==0 ? 1.:-1.;
            uv=mul(uv,b*r(ttime(0.3)+PI/n));
        float l = length(uv)-.07*i;
        
        float q = step(cos(ttime(1.0)+i*i)*.25+.75,(atan2(uv.y,uv.x)+PI)/(2.*PI));

     
        l = abs(l)-   (smoothstep(-1000.,1000.,circle_width)*.1);
        d+=  vec3(p(i/n+fract(ttime(.75)))*smoothstep(.03,.020,l)*q);
        }
        return d ;
}



sampler_state textureSampler {
	Filter    = Linear;
	AddressU  = Border;
	AddressV  = Border;
	BorderColor = 00000000;
};

struct VertData {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

VertData mainTransform(VertFragData v_in)
{
	v_in.pos = mul(float4(v_in.pos.xyz, 1.0), ViewProj);
	return v_in;
}

float4 mainImage(VertData v_in) : TARGET
{
   
	vec2 uv = v_in.uv;
	
	uv = (uv-.5)*iResolution.xy/iResolution.y;
	

    uv*=2.;
    
    vec3 d = fig(uv);
    
    return float4(d,step(0.2,length(d)));
}

technique Draw
{
	pass
	{
		vertex_shader = mainTransform(v_in);
		pixel_shader  = mainImage(v_in);
	}
}